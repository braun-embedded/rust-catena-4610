[build]
target = "thumbv6m-none-eabi"

[target.thumbv6m-none-eabi]
rustflags = [
  # LLD (shipped with the Rust toolchain) is used as the default linker
  #"-C", "link-arg=-Tlink.x",

  # if you run into problems with LLD switch to the GNU linker by commenting out
  # this line
  "-C", "linker=arm-none-eabi-ld",

  # if you need to link to pre-compiled C libraries provided by a C toolchain
  # use GCC as the linker by commenting out both lines above and then
  # uncommenting the three lines below
  "-C", "linker=arm-none-eabi-gcc",
  "-C", "link-arg=-Wl,-Tlink.x",
  "-C", "link-arg=-nostartfiles",
  # the longfi driver compiled with opt-level "s" or "z" uses the symbol `__gnu_thumb1_case_uqi` from libgcc
  "-C", "link-arg=-lgcc",
]

[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# uncomment ONE of these three option to make `cargo run` start a GDB session
# which option to pick depends on your system
# runner = "arm-none-eabi-gdb -q -x openocd.gdb"
runner = "arm-none-eabi-gdb -q -x jlink.gdb"
# runner = "gdb-multiarch -q -x openocd.gdb"
# runner = "gdb-multiarch -q -x jlink.gdb"
# runner = "gdb -q -x openocd.gdb"
# runner = "gdb -q -x jlink.gdb"
# runner = "gdb-multiarch -tui -q -x openocd.gdb"
# runner = "gdb-multiarch -tui -q -x jlink.gdb"
# runner = "scripts/flash.sh" # dfu-util
